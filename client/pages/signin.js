import React, { useState, useContext } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { FcGoogle } from 'react-icons/fc'
import { BsFacebook, BsGithub, BsLinkedin, BsKeyFill } from 'react-icons/bs'
import { BiLogInCircle } from 'react-icons/bi'
import { IoCreateOutline } from 'react-icons/io5'
import { RiAccountCircleFill } from 'react-icons/ri'
import { HiMail } from 'react-icons/hi'
import { VscEye, VscEyeClosed } from 'react-icons/vsc'
import { RiErrorWarningFill } from 'react-icons/ri'
import { useSession, signIn } from 'next-auth/react'
import ForbiddenAccess from '../layouts/ForbiddenAccess'
import swal from 'sweetalert'
import toast from 'react-hot-toast'
import { ThemeContext } from '../context/ThemeState'
import { UserContext } from '../context/UserState'

const signin = () => {
	const { theme } = useContext(ThemeContext)
	const { setUser } = useContext(UserContext)

	const [userCredentials, setUserCredentials] = useState({
		email: '', password: ''
	})
	const [passHidden, setPassHidden] = useState(true)

	const router = useRouter()

	const userSigninHandler = async (e) => {
		e.preventDefault()

		const response = await fetch('http://localhost:3000/api/userSignin', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(userCredentials),
		})

		const parsedRes = await response.json()

		setUser(parsedRes.user)

		if (parsedRes.success) {
			swal(parsedRes.message, {
				icon: 'success',
				timer: 1200,
				button: false
			})

			router.push('/')
		} else {
			parsedRes.error
				? Array.isArray(parsedRes.error)
					? parsedRes.error.map((err) => {
						return theme === 'light'
							? toast(<div>{ err }</div>, {
								icon: <RiErrorWarningFill className='text-2xl text-amber-400' />
							})
							: toast(<div>{ err }</div>, {
								style: {
									backgroundColor: '#000',
									color: '#fff'
								},
								icon: <RiErrorWarningFill className='text-2xl text-amber-400' />
							})
					})
					: theme === 'light'
						? toast(<div>{ parsedRes.error }</div>, {
							icon: <RiErrorWarningFill className='text-2xl text-red-500' />
						})
						: toast(<div>{ parsedRes.error }</div>, {
							style: {
								backgroundColor: '#000',
								color: '#fff'
							},
							icon: <RiErrorWarningFill className='text-2xl text-red-500' />
						})
				: parsedRes.message && theme === 'light'
					? toast(<div>{ parsedRes.message }</div>, {
						icon: <RiErrorWarningFill className='text-2xl text-red-500' />
					})
					: toast(<div>{ parsedRes.message }</div>, {
						style: {
							backgroundColor: '#000',
							color: '#fff'
						},
						icon: <RiErrorWarningFill className='text-2xl text-red-500' />
					})
		}
	}

	const socialSignInHandler = async (provider) => {
		try {
			await signIn(provider, { callbackUrl: 'http://localhost:3000' })
		} catch (error) {
			console.log(error)
			router.push('/signin')
		}
	}

	const passHiddenHandler = () => {
		passHidden
			? setPassHidden(false)
			: setPassHidden(true)
	}

	const onChange = (e) => {
		setUserCredentials({ ...userCredentials, [e.target.name]: e.target.value })
	}

	// google signin session
	const { data: session } = useSession()

	if (session)
		return (
			<>
				<ForbiddenAccess />
				{/* <div className="flex justify-center items-center space-x-2 text-3xl text-indigo-500 text-center font-medium">
					<RiAccountCircleFill />
					<h1 className='cursor-pointer' onClick={ () => { signOut() } }>SIGN OUT</h1>
				</div> */}
			</>
		)

	return (
		<>
			<Head>
				<title>spryDex - Signin</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon-white.png" />
			</Head>
			<div className="container mx-auto my-5 p-5">
				<div className="form bg-white shadow-xl rounded-lg mx-auto md:w-1/2">
					<div className="head w-full bg-indigo-500 flex justify-center items-center space-x-5 rounded-t-lg px-5 py-2">
						<Image src={ '/spryDEX-sym-white.png' } height={ '50' } width={ '50' } alt='spryDEX' />
						<h1 className='text-white text-3xl font-semibold'>spryDEX</h1>
					</div>

					<div className="body px-5 py-10 lg:w-1/2 mx-auto space-y-5">
						<div className="flex justify-center items-center space-x-2 text-3xl text-indigo-500 text-center font-medium">
							<RiAccountCircleFill />
							<h1 className=''>SIGN IN</h1>
						</div>

						<form className='space-y-5' onSubmit={ userSigninHandler } >
							<div className="input-group flex items-center space-x-5 border border-gray-300 rounded text-lg bg-white px-2 py-1 focus-within:border-indigo-500 focus-within:ring-1 focus-within:ring-indigo-500 duration-200 ease-in-out">
								<label htmlFor="email" className="input-label">
									<HiMail className='text-lg' />
								</label>
								<input type="email" id='email' name='email' className='outline-none' placeholder='Email' onChange={ onChange } required />
							</div>

							<div className={ `input-group flex items-center space-x-5 border border-gray-300 rounded text-lg bg-white px-2 py-1 focus-within:border-indigo-500 focus-within:ring-1 focus-within:ring-indigo-500 duration-200 ease-in-out` }>
								<label htmlFor="password" className="input-label w-[10%]">
									<BsKeyFill className='text-lg' />
								</label>
								<input type={ `${passHidden ? 'password' : 'text'}` } id='password' name='password' className='outline-none w-[80%]' placeholder='Password' onChange={ onChange } autoComplete='on' required />
								<span className="input-label w-[10%] mx-auto hover:bg-slate-100 rounded-full p-1 cursor-pointer duration-100" onClick={ passHiddenHandler }>
									{
										passHidden
											? <VscEyeClosed className='text-lg mx-auto' />
											: <VscEye className='text-lg mx-auto' />
									}
								</span>
							</div>

							<div className='text-center'>
								<span className='text-sm text-gray-400 cursor-pointer hover:text-gray-500'>Forgot Password?</span>
							</div>

							<button className='flex items-center space-x-3 mx-auto text-white bg-indigo-500 border-0 py-2 px-10 focus:outline-none hover:bg-indigo-600 rounded text-lg my-4' role={ 'submit' } >
								<span>Sign In</span>
								<span><BiLogInCircle /></span>
							</button>
						</form>

						<div className='text-center'>
							<span className='text-center text-gray-500'>or</span>
						</div>

						<div className='text-center'>
							<span>Sign In With</span>

							<div className='flex space-x-5 justify-center text-4xl mt-1'>
								<button className='hover:bg-slate-100 rounded-full p-2 duration-100' onClick={ () => { socialSignInHandler('google') } }>
									<FcGoogle className='rounded-full cursor-pointer' />
								</button>
								<button className='hover:bg-slate-100 rounded-full p-2 duration-100' onClick={ () => { socialSignInHandler('facebook') } }>
									<BsFacebook className='rounded-full cursor-pointer text-facebook' />
								</button>
								<button className='hover:bg-slate-100 rounded-full p-2 duration-100' onClick={ () => { socialSignInHandler('github') } }>
									<BsGithub className='rounded-full cursor-pointer' />
								</button>
								<button className='hover:bg-slate-100 rounded-full p-2 duration-100' onClick={ () => { socialSignInHandler('linkedin') } }>
									<BsLinkedin className='rounded-full cursor-pointer text-linkedin' />
								</button>
							</div>
						</div>

						<hr />

						<div className="text-center">
							<span>Don't Have an Account?</span>
						</div>

						<Link href={ '/signup' }>
							<button className='flex items-center space-x-3 mx-auto text-white bg-indigo-500 border-0 py-2 px-10 focus:outline-none hover:bg-indigo-600 rounded text-lg my-4'>
								<span>Sign Up</span>
								<span><IoCreateOutline /></span>
							</button>
						</Link>
					</div>
				</div>
			</div>
		</>
	)
}

export default signin